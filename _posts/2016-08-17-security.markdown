---
title: Security
layout: post
date: 2016-08-17 16:40:45
---

I take security very seriously. Here I shall outline the various measures that I will be taking to ensure a secure system.

## Authenticating With My Server
To authenticate with my server, you will need to sign in to my server with your email and a password. They will both be encrypted with powerful **AES encryption**. Not only this, but the password will also be **hashed** and **salted** on top of that heavy encryption.

**Hashing** is when you use a complex algorithm to crush down the bytes (1s and 0s) of a password into a string of what looks like random characters. This is called the hash. If a single character in your password is different, the hash will be *completely* different. But if you don't change anything, then the hash result will always be *exactly* the same every time. Also, it is almost impossible to get the original password from a hash. What my server will do is that it will store the *hash* of your password rather than your actual password. When you submit the password to my server, the password you typed in will not be sent to my server. Instead, it will be hashed and the *hash* will be sent to my server. If the hash matches the hash that is in my server's database then I would know that the password is correct - and I could know this without ever knowing the actual password. This also means that if my database ever gets leaked, all that the hackers will find is a jumble of seemingly meaningless letters.

**Salting** takes this hashing concept to the next level. Let's say that someone got hands on one of the hashes in my database. They can try to **brute force** or **dictionary attack** that hash. **Brute forcing** is when you hash every combination of letters and see if it matches the hash in the database until you finally find the password. Understandably, this will take a long, long amount of time and so it is only good for passwords that are only a couple of characters long. 

A **dictionary attack** is when a hacker uses a word list - such as a dictionary or a list of the most commonly used passwords or something - and they run through the list, trying everything in the list against the hash. They might even do all sorts of fancy stuff like joining several items in the word list together, adding letters and numbers after the entries in the wordlist and shifting case, etc. Of course, in both brute forcing and dictionary attacks, the fact that the hacker needs to hash each try will slow them down quite a lot. However, when it comes to dictionary attacks, there are what is known as **rainbow tables**. A rainbow table is basically a wordlist and next to each wordlist is the pre-computed hash corresponding to that entry. This way, it is much faster.

***AND THIS*** is where **salting** comes in.

<small>This article is unfinished</small>