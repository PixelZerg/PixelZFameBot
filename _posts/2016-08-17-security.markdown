---
title: Security
layout: post
date: 2016-08-17 16:40:45
---

I take security very seriously. Here I shall outline the various measures that I will be taking to ensure a secure system.

## Authenticating With My Server
To authenticate with my server, you will need to sign in to my server with your email and a password. They will both be encrypted with powerful **AES encryption**. Not only this, but the password will also be **hashed** and **salted** on top of that heavy encryption.

**Hashing** is when you use a complex algorithm to crush down the bytes (1s and 0s) of a password into a string of what looks like random characters. This is called the hash. If a single character in your password is different, the hash will be *completely* different. But if you don't change anything, then the hash result will always be *exactly* the same every time. Also, it is almost impossible to get the original password from a hash. What my server will do is that it will store the *hash* of your password rather than your actual password. When you submit the password to my server, the password you typed in will not be sent to my server. Instead, it will be hashed and the *hash* will be sent to my server. If the hash matches the hash that is in my server's database then I would know that the password is correct - and I could know this without ever knowing the actual password. This also means that if my database ever gets leaked, all that the hackers will find is a jumble of seemingly meaningless letters.

**Salting** takes this hashing concept to the next level. Let's say that someone got hands on one of the hashes in my database. They can try to **brute force** or **dictionary attack** that hash. **Brute forcing** is when you hash every combination of letters and see if it matches the hash in the database until you finally find the password. Understandably, this will take a long, long amount of time and so it is only good for passwords that are only a couple of characters long. If your password is a decent size, then it will take centuries to finally get the password. Most hackers wouldn't even think of attempting this.

A **dictionary attack** is when a hacker uses a word list - such as a dictionary or a list of the most commonly used passwords or something - and they run through the list, trying everything in the list against the hash. They might even do all sorts of fancy stuff like joining several items in the word list together, adding letters and numbers after the entries in the wordlist and shifting case, etc. Of course, in both brute forcing and dictionary attacks, the fact that the hacker needs to compute a hash at every attempt at getting the password will slow down the hacker to the point where finding the password would take decades if you have a decent password. However, when it comes to dictionary attacks, there are what is known as **rainbow tables**. A rainbow table is basically a wordlist and next to each wordlist is the pre-computed hash corresponding to that entry. This way, it is much faster.

***AND THIS*** is where **salting** comes in. **Salting** is when you get a long random string of letters and prepend it to the password before you hash the password. You also keep the random string of letters in plain text next to the hash in the database. You could write the salt on a piece of paper and shove it in the hacker's face for all it matters. Either way, nobody is going to have made a rainbow table which has precomputed all the entries in a wordlist - but with this specific string of random letters at the start. This means that the hacker is going to have to resort to computing all the hashes himself and, again, this will take him absolutely decades.

Oh, you thought I was finished there? The whole thing (the hash and the email, etc) is going to also be encrypted with the insanely secure AES encryption. AES encryption is a symmetric encryption method. This means it needs a key - a secret password to encrypt or decrypt data. This key is going to be randomly generated each time a client connects to the server, the key is given to the client and from then onwards, everything - the packets, the authentication data, etc - is going to be encrypted using the key.

"But surely a hacker could intercept the key!?" I hear you say. However, fear not! Obviously the key is not going to be sent in plain text. I am going to use a special protocol to send the AES Key, which uses RSA. RSA is an asymmetric algorithm. That means that there are two types of keys, a public key and a private key. Here's my analogy for this protocol:

> Let's say I, the server, have a box that has a special kind of lock. The keyhole on the box can either be locked by turning it to the left or turning it to the right. When it is not locked, it is vertical. If it is not locked, then it has been turned either to the left or to the right. This lock also has two different keys. A public key and a private key. The public key is public. I make copies of it and distribute it to all of my friends. The private key, however, I keep to myself. The public key can only turn clockwise and the private key can only turn anticlockwise. To encrypt something with the public key, you put something in the box and lock the lock by turning it clockwise. You then send this box to me. I can use my private key to unlock the box by turning the lock anticlockwise and get to the thing in the box. So that means that everyone I gave a public key to can securely send me stuff using this box. Also, this means that if I lock something in my box using my private key, anyone with a public key would be able to unlock the thing in the box. However, this is more useful than it seems because since only the public key I gave out can work with my private key, anyone who gets the box and can unlock it with my public key can be sure that the person who locked the box locked it with my private key. Since I kept my private key only to myself, if you can unlock the box with my public key, you can be pretty sure that I was the person that locked it. This is called signing.

By the way, if you want to see the actual maths behind it then you can probably find something interesting on the Internet. Now here is how the protocol works.


<small>This article is unfinished</small>